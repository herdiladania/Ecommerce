// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	cart "e-commerce/features/cart"

	mock "github.com/stretchr/testify/mock"
)

// CartService is an autogenerated mock type for the CartService type
type CartService struct {
	mock.Mock
}

// AddCartSrv provides a mock function with given fields: newCart
func (_m *CartService) AddCartSrv(newCart cart.Core) (cart.Core, error) {
	ret := _m.Called(newCart)

	var r0 cart.Core
	if rf, ok := ret.Get(0).(func(cart.Core) cart.Core); ok {
		r0 = rf(newCart)
	} else {
		r0 = ret.Get(0).(cart.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(cart.Core) error); ok {
		r1 = rf(newCart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCartSrv provides a mock function with given fields: userID, cartID
func (_m *CartService) DeleteCartSrv(userID uint, cartID uint) error {
	ret := _m.Called(userID, cartID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(userID, cartID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MyCartSrv provides a mock function with given fields: id
func (_m *CartService) MyCartSrv(id uint) ([]cart.Core, error) {
	ret := _m.Called(id)

	var r0 []cart.Core
	if rf, ok := ret.Get(0).(func(uint) []cart.Core); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cart.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCartSrv provides a mock function with given fields: userID, cartID, updateCart
func (_m *CartService) UpdateCartSrv(userID uint, cartID uint, updateCart cart.Core) (cart.Core, error) {
	ret := _m.Called(userID, cartID, updateCart)

	var r0 cart.Core
	if rf, ok := ret.Get(0).(func(uint, uint, cart.Core) cart.Core); ok {
		r0 = rf(userID, cartID, updateCart)
	} else {
		r0 = ret.Get(0).(cart.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, cart.Core) error); ok {
		r1 = rf(userID, cartID, updateCart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCartService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCartService creates a new instance of CartService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCartService(t mockConstructorTestingTNewCartService) *CartService {
	mock := &CartService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
