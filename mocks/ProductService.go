// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	product "e-commerce/features/product"
)

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

// Add provides a mock function with given fields: token, newProduct, image
func (_m *ProductService) Add(token interface{}, newProduct product.Core, image *multipart.FileHeader) (product.Core, error) {
	ret := _m.Called(token, newProduct, image)

	var r0 product.Core
	if rf, ok := ret.Get(0).(func(interface{}, product.Core, *multipart.FileHeader) product.Core); ok {
		r0 = rf(token, newProduct, image)
	} else {
		r0 = ret.Get(0).(product.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, product.Core, *multipart.FileHeader) error); ok {
		r1 = rf(token, newProduct, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllProducts provides a mock function with given fields:
func (_m *ProductService) AllProducts() ([]product.Core, error) {
	ret := _m.Called()

	var r0 []product.Core
	if rf, ok := ret.Get(0).(func() []product.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: token, productID
func (_m *ProductService) Delete(token interface{}, productID uint) error {
	ret := _m.Called(token, productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint) error); ok {
		r0 = rf(token, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProductById provides a mock function with given fields: token, productID
func (_m *ProductService) GetProductById(token interface{}, productID uint) (product.Core, error) {
	ret := _m.Called(token, productID)

	var r0 product.Core
	if rf, ok := ret.Get(0).(func(interface{}, uint) product.Core); ok {
		r0 = rf(token, productID)
	} else {
		r0 = ret.Get(0).(product.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint) error); ok {
		r1 = rf(token, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: token, productID, updateProduct, updateImage
func (_m *ProductService) Update(token interface{}, productID uint, updateProduct product.Core, updateImage *multipart.FileHeader) (product.Core, error) {
	ret := _m.Called(token, productID, updateProduct, updateImage)

	var r0 product.Core
	if rf, ok := ret.Get(0).(func(interface{}, uint, product.Core, *multipart.FileHeader) product.Core); ok {
		r0 = rf(token, productID, updateProduct, updateImage)
	} else {
		r0 = ret.Get(0).(product.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint, product.Core, *multipart.FileHeader) error); ok {
		r1 = rf(token, productID, updateProduct, updateImage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductService interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductService creates a new instance of ProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductService(t mockConstructorTestingTNewProductService) *ProductService {
	mock := &ProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
